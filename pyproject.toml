[build-system]
#requires = ["setuptools==59.6.0"]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "context_aware_word_vectors"
description = "Context Aware Word Vectors"
authors = [
  { name="Ashok Chilakapati", email="ashok.chilakapati@gmail.com" }
]
version = "1.0.0"
requires-python = ">=3.10"
classifiers = [
  "Intended Audience :: NLP",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.10",
  "Typing :: Typed",
]
dependencies = [
  "pip-tools", "transformers","jsonlines", "torch", "tensorflow"
]

[project.optional-dependencies]
test = [
  "pytest",
  "pytest-cov",
  "coverage",
]

dev = [
  "grip",
  "johnnydep",
  "autopep8",
  "autoflake",
  "black",
  "flake8",
  "isort",
  "mypy",
  "pre-commit",
  "pylint",
  "pyupgrade",
  "tox >4",
  "types-requests"
]

[project.urls]
"Homepage" = "https://github.com/ashokc/context-aware-word-vectors"

[tool.pip-tools]
generate-hashes = false


[tool.autopep8]
max_line_length = 88
#ignore = ["E501", "W6"]
in-place = false
recursive = true
#aggressive = 3

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]

[tool.black]
target-version = ["py310"]
include = '\.pyi?$'


[tool.tox]
legacy_tox_ini = """
    [tox]
    requires =
        tox>4
    env_list =
        py310
        lint

    [testenv]
    deps =
        pytest
        pytest-cov
    commands = pytest

    [testenv:lint]
    allowlist_externals = bash
    deps =
        mypy
        pylint
        flake8
    commands =
        bash -c 'pylint src/context_aware_word_vectors -r n --output-format=parseable --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" --exit-zero --ignore-paths="src/context_aware_word_vectors/bak" src/context_aware_word_vectors tests | tee validation/pylint-report.txt'
        bash -c 'flake8 --format=pylint --exit-zero --ignore=E501,E800,W503,G001,E305,G004 --max-line-length=89 --extend-exclude="src/context_aware_word_vectors/bak" src/context_aware_word_vectorstests | tee validation/flake8-report.txt'
        bash -c 'mypy --exclude src/context_aware_word_vectors/bak src | tee validation/mypy-new.log'
"""

[tool.pytest.ini_options]
addopts = " --cov src --cov-report xml:coverage-reports/coverage.xml --cov-report html:coverage-reports/cov-html --cov-fail-under 0"
pythonpath = [ "src" ]
markers = [
    "pt: Test pytorch framework",
    "tf: Test tensorflow framework",
    "all: All - To generate coverage metrics"
]

[tool.coverage.run]
omit = []

[tool.coverage.report]
fail_under = 0
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
pretty = true
disallow_any_unimported = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
check_untyped_defs = true
show_error_codes = true
show_absolute_path = true

#
# All for pylint here... Obtained with
#pylint --disable=bare-except,invalid-name --class-rgx='[A-Z][a-z]+' --generate-toml-config > pylint.toml
#cat pylint.toml | grep -v '^#' | egrep '[aA-zZ]'
#

[tool.pylint.main]
max-line-length = 88
fail-under = 10.0
ignore = ["CVS"]
ignore-patterns = ["^\\.#"]
jobs = 1
limit-inference-results = 100
load-plugins = ["pylint.extensions.check_elif", "pylint.extensions.bad_builtin", "pylint.extensions.docparams", "pylint.extensions.for_any_all", "pylint.extensions.set_membership", "pylint.extensions.code_style", "pylint.extensions.overlapping_exceptions", "pylint.extensions.typing", "pylint.extensions.redefined_variable_type", "pylint.extensions.comparison_placement"]
persistent = true
py-version = "3.7.2"
suggestion-mode = true
[tool.pylint.basic]
argument-naming-style = "snake_case"
argument-rgx = "[a-z_][a-z0-9_]{2,30}$"
attr-naming-style = "snake_case"
attr-rgx = "[a-z_][a-z0-9_]{2,}$"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
class-rgx = "[A-Z][a-z]+"
const-naming-style = "UPPER_CASE"
const-rgx = "(([A-Z_][A-Z0-9_]*)|(__.*__))$"
docstring-min-length = -1
function-naming-style = "snake_case"
function-rgx = "[a-z_][a-z0-9_]{2,30}$"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
inlinevar-rgx = "[A-Za-z_][A-Za-z0-9_]*$"
method-naming-style = "snake_case"
method-rgx = "[a-z_][a-z0-9_]{2,}$"
module-naming-style = "snake_case"
module-rgx = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
no-docstring-rgx = "__.*__"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"
variable-rgx = "[a-z_][a-z0-9_]{2,30}$"
[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]
[tool.pylint.code_style]
[tool.pylint.deprecated_builtins]
bad-functions = ["map", "input"]
[tool.pylint.design]
max-args = 10
max-attributes = 11
max-bool-expr = 5
max-branches = 27
max-locals = 25
max-parents = 7
max-public-methods = 25
max-returns = 11
max-statements = 100
min-public-methods = 2
[tool.pylint.exceptions]
#overgeneral-exceptions = ["Exception"]
overgeneral-exceptions= ["builtins.BaseException", "builtins.Exception"]
[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 100
max-module-lines = 2000
[tool.pylint.imports]
deprecated-modules = ["regsub", "TERMIOS", "Bastion", "rexec"]
known-third-party = ["enchant"]
[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]
[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = ["raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "deprecated-pragma", "attribute-defined-outside-init", "invalid-name", "missing-module-docstring", "missing-class-docstring", "missing-function-docstring", "protected-access", "too-few-public-methods", "line-too-long", "too-many-lines", "trailing-whitespace", "missing-final-newline", "trailing-newlines", "bad-indentation", "unnecessary-semicolon", "multiple-statements", "superfluous-parens", "mixed-line-endings", "unexpected-line-ending-format", "fixme", "cyclic-import", "duplicate-code", "bare-except", "redefined-outer-name"]
enable = ["useless-suppression", "use-symbolic-message-instead", "c-extension-no-member"]
[tool.pylint.method_args]
timeout-methods = ["requests.api.delete", "requests.api.get", "requests.api.head", "requests.api.options", "requests.api.patch", "requests.api.post", "requests.api.put", "requests.api.request"]
[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]
[tool.pylint.parameter_documentation]
accept-no-param-doc = true
accept-no-raise-doc = true
accept-no-return-doc = true
accept-no-yields-doc = true
default-docstring-type = "default"
[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]
[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true
[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 6
[tool.pylint.spelling]
max-spelling-suggestions = 2
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:,pragma:,# noinspection"
spelling-private-dict-file = ".pyenchant_pylint_custom_dict.txt"
[tool.pylint.string]
[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
generated-members = "REQUEST,acl_users,aq_parent,argparse.Namespace"
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager", "attribute-defined-outside-init"]
ignored-classes = ["SQLObject", "optparse.Values", "thread._local", "_thread._local"]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*MixIn"
[tool.pylint.typing]
[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_$|dummy"
ignored-argument-names = "_.*"
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]
